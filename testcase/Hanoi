% time(0..t) and disk(1..k) are two definitions in the data set defining
% appropriate data types.
%
% The meaning of the time predicate is self-evident. As for the disk
% predicate, there are k disks 1,2,...,k. Disks 1, 2, 3 denote pegs. 
% Disks 4, 5, ... are "movable". The larger the number of the disk, 
% the "smaller" it is.
%
% The program uses additional predicates:
% on(T,N,M), which is true iff at time T, disk M is on disk N
% move(t,N), which is true iff at time T, it is disk N that will be
% moved
% where(T,N), which is true iff at time T, the disk to be moved is moved
% on top of the disk N.
% goal, which is true iff the goal state is reached at time t
% steps(T), which is the number of time steps T, required to reach the goal (provided part of Input data)

% Read in data 
 	on(0,N,N1) :- disk(N;N1), on0(N,N1).
 	onG(K,N,N1) :- disk(N;N1), ongoal(N,N1), steps(K).
		   
% Specify valid arrangements of disks
 	% Basic condition. Smaller disks are on larger ones
 	:- time(T), disk(N1;N), on(T,N1,N), N1>=N.

% Specify a valid move (only for T<t)
 	% pick a disk to move
 	1{move(T,N):disk(N)}1 :- time(T), steps(K), T<K.

 	% pick a disk onto which to move
 	1{where(T,N):disk(N)}1 :- time(T), steps(K), T<K.

 	% pegs cannot be moved
 	:- time(T), disk(N), steps(K), T<K, move(T,N), N<=3.

 	% only top disk can be moved
 	:- time(T), disk(N;N1), steps(K), T<K, on(T,N,N1), move(T,N).

 	% a disk can be placed on top only.
 	:- time(T), disk(N;N1), steps(K), T<K, on(T,N,N1), where(T,N).

 	% no disk is moved in two consecutive moves
 	:- time(T;T-1), disk(N), T>0, steps(K), T<K, move(T,N), move(T-1,N).

% Specify effects of a move
 	on(T+1,N,N1) :- time(T;T+1), disk(N;N1), steps(K), T<K,
 	                on(T,N,N1), not move(T,N1).

% T<t, move(T,N), where(T,N1) -> on(T+1,N1,N).
 	on(T+1,N1,N) :- time(T), disk(N;N1), steps(K), T<K, move(T,N), where(T,N1).

% Goal description
	 :- not on(K,N,N1), onG(K,N,N1), disk(N;N1), steps(K).
	 :- on(K,N,N1), not onG(K,N,N1), disk(N;N1), steps(K).

% Solution
	 put(T,M,N) :- time(T), steps(K), T<K, disk(N;M), move(T,N), where(T,M).